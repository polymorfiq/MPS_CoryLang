package CoryLangWasm.Helpers;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class TypeTransformHelpers {
  public static Iterable<SNode> typeDeclarations(Iterable<SNode> nodes) {
    Deque<SNode> outputs = LinkedListSequence.fromLinkedList(new LinkedList<SNode>());

    for (SNode node : Sequence.fromIterable(nodes)) {
      SAbstractConcept cncpt = SNodeOperations.getConcept(node);
      boolean noneMatched = true;
      if (noneMatched && SConceptOperations.isSubConceptOf(cncpt, CONCEPTS.Function$GL)) {
        noneMatched = false;
        SNode func = SNodeOperations.as(node, CONCEPTS.Function$GL);
        SNode functype = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ebaL, "WebAssembly.structure.FuncType"));

        SNode params = toWasmTypeResultType(SLinkOperations.getChildren(func, LINKS.params$oyM_));
        SNode results = toWasmTypeResultType(SLinkOperations.getChildren(func, LINKS.results$pf8y));

        SNode fType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ebaL, "WebAssembly.structure.FuncType"));
        SLinkOperations.setTarget(fType, LINKS.params$g2Jl, params);
        SLinkOperations.setTarget(fType, LINKS.results$g3dn, results);
        LinkedListSequence.fromLinkedListNew(outputs).pushElement(fType);

      }
    }

    return ListSequence.fromList(LinkedListSequence.fromLinkedListNew(outputs).toList()).reversedList();
  }

  public static Iterable<SNode> typeIdxDeclaration(Iterable<SNode> nodes) {
    Deque<SNode> outputs = LinkedListSequence.fromLinkedList(new LinkedList<SNode>());
    int currIdx = 0;

    for (SNode node : Sequence.fromIterable(nodes)) {
      SAbstractConcept cncpt = SNodeOperations.getConcept(node);
      boolean noneMatched = true;
      if (noneMatched && SConceptOperations.isSubConceptOf(cncpt, CONCEPTS.Function$GL)) {
        noneMatched = false;
        SNode typeIdx = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ee1ef534L, "WebAssembly.structure.TypeIdx"));

        SPropertyOperations.assign(typeIdx, PROPS.value$pMNX, currIdx);
        LinkedListSequence.fromLinkedListNew(outputs).pushElement(typeIdx);


        currIdx += 1;

      }
    }

    return ListSequence.fromList(LinkedListSequence.fromLinkedListNew(outputs).toList()).reversedList();
  }

  public static Iterable<SNode> codeDeclarations(Iterable<SNode> nodes) {
    Deque<SNode> outputs = LinkedListSequence.fromLinkedList(new LinkedList<SNode>());

    for (SNode node : Sequence.fromIterable(nodes)) {
      SAbstractConcept cncpt = SNodeOperations.getConcept(node);
      boolean noneMatched = true;
      if (noneMatched && SConceptOperations.isSubConceptOf(cncpt, CONCEPTS.Function$GL)) {
        noneMatched = false;
        SNode func = SNodeOperations.as(node, CONCEPTS.Function$GL);
        SNode outputFunc = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f543f0f3L, "WebAssembly.structure.Func"));

        final SNode funcCode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f545b99aL, "WebAssembly.structure.Code"));
        SLinkOperations.setTarget(funcCode, LINKS.func$aeX1, outputFunc);
        SLinkOperations.setTarget(SLinkOperations.getTarget(funcCode, LINKS.func$aeX1), LINKS.expr$w151, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f4f6eb37L, "WebAssembly.structure.Expr")));

        ListSequence.fromList(SLinkOperations.getChildren(func, LINKS.body$vjN8)).visitAll((stmt) -> {
          Iterable<SNode> instrs = InstrHelper.nodeToInstr(stmt);
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(funcCode, LINKS.func$aeX1), LINKS.expr$w151), LINKS.instrs$LGLM)).addSequence(Sequence.fromIterable(instrs));
        });

        LinkedListSequence.fromLinkedListNew(outputs).pushElement(funcCode);

      }
    }

    return ListSequence.fromList(LinkedListSequence.fromLinkedListNew(outputs).toList()).reversedList();
  }



  public static SNode toWasmTypeResultType(Iterable<SNode> args) {
    SNode result = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7aee8aL, "WebAssembly.structure.ResultType"));

    for (SNode paramOrResult : Sequence.fromIterable(args)) {
      SNode typeContainer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7d6e6cL, "WebAssembly.structure.ValTypeContainer"));

      switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(paramOrResult, PROPS.type$RW2q))) {
        case 0:
          SPropertyOperations.assignEnum(typeContainer, PROPS.valtype$$P7n, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7a49abL, "WebAssembly.structure.ValType"), 0x601bfff8ed7a49acL, "i32"));
          break;
        case 1:
          SPropertyOperations.assignEnum(typeContainer, PROPS.valtype$$P7n, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7a49abL, "WebAssembly.structure.ValType"), 0x601bfff8ed7a49adL, "i64"));
          break;
        case 2:
          SPropertyOperations.assignEnum(typeContainer, PROPS.valtype$$P7n, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7a49abL, "WebAssembly.structure.ValType"), 0x601bfff8ed7a49b0L, "f32"));
          break;
        case 3:
          SPropertyOperations.assignEnum(typeContainer, PROPS.valtype$$P7n, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7a49abL, "WebAssembly.structure.ValType"), 0x601bfff8ed7a49b4L, "f64"));
          break;
      }

      ListSequence.fromList(SLinkOperations.getChildren(result, LINKS.data$_MXP)).addElement(typeContainer);
    }

    return result;
  }

  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x7c255ef74f4f054cL, 0x7c255ef74f4f054dL, 0x7c255ef74f4f0580L, 0x7c255ef74f4f058dL, 0x7c255ef74f4f05a5L);

  private static final class CONCEPTS {
    /*package*/ static final SConcept Function$GL = MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e368L, "CoryLang.structure.Function");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink params$oyM_ = MetaAdapterFactory.getContainmentLink(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e368L, 0x7c255ef74f4f0836L, "params");
    /*package*/ static final SContainmentLink results$pf8y = MetaAdapterFactory.getContainmentLink(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e368L, 0x7c255ef74f4f0875L, "results");
    /*package*/ static final SContainmentLink params$g2Jl = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ebaL, 0x601bfff8ed828ebeL, "params");
    /*package*/ static final SContainmentLink results$g3dn = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ebaL, 0x601bfff8ed828ec0L, "results");
    /*package*/ static final SContainmentLink func$aeX1 = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f545b99aL, 0x39e7fc40f545b99fL, "func");
    /*package*/ static final SContainmentLink expr$w151 = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f543f0f3L, 0x39e7fc40f543f0f8L, "expr");
    /*package*/ static final SContainmentLink body$vjN8 = MetaAdapterFactory.getContainmentLink(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e368L, 0x39e7fc40f9b5ff91L, "body");
    /*package*/ static final SContainmentLink instrs$LGLM = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f4f6eb37L, 0x39e7fc40f4f6eb38L, "instrs");
    /*package*/ static final SContainmentLink data$_MXP = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7aee8aL, 0x601bfff8edb08d02L, "data");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$pMNX = MetaAdapterFactory.getProperty(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ee1ef534L, 0x601bfff8ee1ef535L, "value");
    /*package*/ static final SProperty valtype$$P7n = MetaAdapterFactory.getProperty(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7d6e6cL, 0x601bfff8ed7d6e72L, "valtype");
    /*package*/ static final SProperty type$RW2q = MetaAdapterFactory.getProperty(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x7c255ef74f4f0792L, 0x7c255ef74f4f0801L, "type");
  }
}
