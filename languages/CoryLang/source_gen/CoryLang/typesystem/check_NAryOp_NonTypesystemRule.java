package CoryLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_NAryOp_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_NAryOp_NonTypesystemRule() {
  }
  public void applyRule(final SNode nAryOp, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final Wrappers._T<SNode> validType = new Wrappers._T<SNode>(null);
    ListSequence.fromList(SLinkOperations.getChildren(nAryOp, LINKS.args$XH7Z)).visitAll((arg) -> {
      if ((validType.value == null)) {
        validType.value = TypecheckingFacade.getFromContext().getTypeOf(arg);
      } else if (!(Objects.equals(SNodeOperations.getConcept(validType.value), SNodeOperations.getConcept(TypecheckingFacade.getFromContext().getTypeOf(arg))))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(arg, String.format("Expected type (%s) but got (%s)", SNodeOperations.getConcept(validType.value), SNodeOperations.getConcept(TypecheckingFacade.getFromContext().getTypeOf(arg))), "r:9ddd07c5-2599-42c8-a119-ecda288c2c8e(CoryLang.typesystem)", "8945660651240560539", null, errorTarget);
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.NAryOp$b8;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink args$XH7Z = MetaAdapterFactory.getContainmentLink(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x7c255ef75466a140L, 0x7c255ef75466a27aL, "args");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NAryOp$b8 = MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x7c255ef75466a140L, "CoryLang.structure.NAryOp");
  }
}
