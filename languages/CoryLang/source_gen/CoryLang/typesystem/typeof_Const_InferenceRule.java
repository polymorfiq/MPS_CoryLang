package CoryLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_Const_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_Const_InferenceRule() {
  }
  public void applyRule(final SNode constVal, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode valType;
    switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(constVal, PROPS.valType$kiC8))) {
      case 0:
        valType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e36cL, "CoryLang.structure.I32"));
        break;
      case 1:
        valType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e36dL, "CoryLang.structure.I64"));
        break;
      case 2:
        valType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e36eL, "CoryLang.structure.F32"));
        break;
      case 3:
        valType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e36fL, "CoryLang.structure.F64"));
        break;
      default:
        valType = null;
    }

    {
      SNode _nodeToCheck_1029348928467 = constVal;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:9ddd07c5-2599-42c8-a119-ecda288c2c8e(CoryLang.typesystem)", "8945660651214965706", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:9ddd07c5-2599-42c8-a119-ecda288c2c8e(CoryLang.typesystem)", "8945660651214963969", true), (SNode) valType, _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Const$Wh;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x7c255ef74f4f054cL, 0x7c255ef74f4f054dL, 0x7c255ef74f4f0580L, 0x7c255ef74f4f058dL, 0x7c255ef74f4f05a5L);

  private static final class PROPS {
    /*package*/ static final SProperty valType$kiC8 = MetaAdapterFactory.getProperty(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e373L, 0x7c255ef750435947L, "valType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Const$Wh = MetaAdapterFactory.getConcept(0xbe6061dd252a45b8L, 0x9db81233f2660809L, 0x39e7fc40f9b5e373L, "CoryLang.structure.Const");
  }
}
